"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.getClientNamesRecord = void 0;
const config_1 = require("../config");
const modules_1 = require("../modules");
const importEqualsModule = __importStar(require("../modules/importEqualsModule"));
const importModule = __importStar(require("../modules/importModule"));
const requireModule = __importStar(require("../modules/requireModule"));
const utils_1 = require("../utils");
const getClientNamesFromDeepImport_1 = require("./getClientNamesFromDeepImport");
const getClientNamesRecord = (j, source, importType) => {
    const clientNamesRecord = {};
    const { getImportSpecifiers } = importType === modules_1.ImportType.REQUIRE
        ? requireModule
        : importType === modules_1.ImportType.IMPORT_EQUALS
            ? importEqualsModule
            : importModule;
    const specifiersFromNamedImport = getImportSpecifiers(j, source, config_1.PACKAGE_NAME).filter((importSpecifier) => importSpecifier.importedName);
    for (const { importedName, localName } of specifiersFromNamedImport) {
        const clientName = importedName ?? localName;
        if (config_1.CLIENT_NAMES.includes(clientName)) {
            clientNamesRecord[clientName] = localName;
        }
    }
    const clientNamesFromDeepImport = (0, getClientNamesFromDeepImport_1.getClientNamesFromDeepImport)(source.toSource());
    for (const clientName of clientNamesFromDeepImport) {
        const deepImportPath = (0, utils_1.getClientDeepImportPath)(clientName);
        const specifiersFromDeepImport = getImportSpecifiers(j, source, deepImportPath).filter((importSpecifier) => !importSpecifier.importedName);
        if (specifiersFromDeepImport.length > 0) {
            clientNamesRecord[clientName] = specifiersFromDeepImport[0].localName;
        }
    }
    // Populate client names for type transformations
    // Ref: https://github.com/aws/aws-sdk-js-codemod/issues/663
    for (const clientName of clientNamesFromDeepImport) {
        if (!(clientName in clientNamesRecord)) {
            clientNamesRecord[clientName] = clientName;
        }
    }
    return clientNamesRecord;
};
exports.getClientNamesRecord = getClientNamesRecord;
